version: "3.8"

services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - kafka_net

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - kafka_net

  mock-generator:
    build:
      context: ./mock_data
    command: ["sh", "-c", "sleep 5 && python generator.py"]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador1_limpeza:
    build:
      context: ./tratador1_limpeza
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador2_filtragem:
    build:
      context: ./tratador2_filtragem
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador_4_agrupar_colunas:
    build:
      context: ./tratador_4_agrupar_colunas
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador_6_correlacao:
    build:
      context: ./tratador_6_correlacao
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador_7_desviopadrao:
    build:
      context: ./tratador_7_desviopadrao
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador_9_mediamovel:
    build:
      context: ./tratador_9_mediamovel
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador8_regressao:
    build:
      context: ./tratador8_regressao
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

  tratador-media:
    build:
      context: ./tratador_media
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./databases_mock:/app/databases_mock 

  tratador-merge:
    build:
      context: ./tratador_merge
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    volumes:
      - ./databases_mock:/app/databases_mock 
      - ./volumes/checkpoints:/app/checkpoints

  api:
    build:
      context: ./api
    ports:
      - "${API_PORT}:8000"
    depends_on:
      - tratador8_regressao
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - kafka_net

  dashboard:
    build:
      context: ./dashboard
    ports:
      - "${DASHBOARD_PORT}:8501"
    depends_on:
      - api
    command: ["streamlit", "run", "dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - kafka_net

# volumes:
#   resultados:

networks:
  kafka_net:
