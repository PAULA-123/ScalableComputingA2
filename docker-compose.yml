services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 1s
      retries: 3

  mock-generator:
    build:
      context: ./mock_data
    environment:
      - REDIS_HOST=redis
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

  tratador-limpeza:
    build:
      context: ./tratador_limpeza
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
    depends_on:
      - kafka
      - mock-generator
    volumes:
      - ./artifacts:/app/artifacts
      - ./logs/cleaner:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G

  tratador-filtragem:
    build:
      context: ./tratador_filtragem
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
    depends_on:
      - kafka
      - tratador-limpeza
    volumes:
      - ./logs/filtrador:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G
        
  tratador-agrupamento:
    build:
      context: ./tratador_agrupamento
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
      - GROUP_ID=tratador_agrupamento_2fontes
    depends_on:
      - kafka
      - tratador-filtragem
    volumes:
      - ./logs/agrupamento:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G

  tratador-correlacao:
    build:
      context: ./tratador_correlacao
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=1g
      - GROUP_ID=tratador_correlacao_group
      - API_URL=http://api:8000/correlacao
      - OUTPUT_FILE=/app/databases_mock/correlacao.json
      - DEBUG=true
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
      - tratador-agrupamento
      - tratador-merge
    volumes:
      - ./databases_mock:/app/databases_mock:z
      - ./logs/correlacao:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G

  tratador-merge:
    build:
      context: ./tratador_merge
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
      - GROUP_ID=tratador_merge_group
      - TOPIC_HOSPITAL=filtered_hospital
      - TOPIC_SECRETARY=filtered_secretary
      - TOPIC_HIST_HOSPITAL=raw_hospital_h
      - TOPIC_HIST_SECRETARY=raw_secretary_h
      - TOPIC_SAIDA=merge_hospital_secretary
      - API_URL=http://api:8000/merge-cep
      - HISTORIC_API_URL=http://api:8000/historico
      - OUTPUT_FILE=/app/databases_mock/merge_batch.json
      - HISTORIC_FILE=/app/databases_mock/historico_agregado.json
      - DEBUG=true
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
      - tratador-filtragem
    volumes:
      - ./databases_mock:/app/databases_mock:z
      - ./logs/merge:/app/logs
    deploy:
      resources:
        limits:
          memory: 4G
    healthcheck:
      test: ["CMD", "pgrep", "-f", "tratador_merge.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  tratador-media:
    build:
      context: ./tratador_media
    environment:
      - SOURCE_TOPIC=filtered_oms
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
      - GROUP_ID=tratador_alerta_group
      - API_URL=http://api:8000/alerta-obitos
      - OUTPUT_FILE=/app/databases_mock/alerta_batch.json
      - DEBUG=true
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
      - tratador-filtragem
    volumes:
      - ./databases_mock:/app/databases_mock:z
      - ./logs/media:/app/logs
    deploy:
      resources:
        limits:
          memory: 2G
    healthcheck:
      test: ["CMD", "pgrep", "-f", "tratador_media.py"]
      interval: 30s
      timeout: 10s
      retries: 3

  tratador-desvio:
    build:
      context: ./tratador_desviopadrao
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=tratador_desvio_group
      - API_URL=http://api:8000/desvios
      - OUTPUT_FILE=/app/databases_mock/desvio.json
      - PYTHONUNBUFFERED=1
      - DEBUG=true
    depends_on:
      - kafka
      - tratador-merge
    volumes:
      - ./databases_mock:/app/databases_mock:z
      - ./logs/desvio:/app/logs
    deploy:
      resources:
        limits:
          memory: 2G


  api:
    build:
      context: ./api
    ports:
      - "8000:8000"
    depends_on:
      - tratador-merge
      - tratador-media
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]

  dashboard:
    build:
      context: ./dashboard
    ports:
      - "8501:8501"
    depends_on:
      - api
    command: ["streamlit", "run", "dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]

volumes:
  zookeeper_data:
  kafka_data:
  redis_data: