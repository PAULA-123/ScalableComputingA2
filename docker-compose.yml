services:
  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - kafka_data:/bitnami
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  mock-generator:
    build:
      context: ./mock_data
    command: ["sh", "-c", "sleep 5 && python generator.py"]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
    restart: unless-stopped
    # volumes:
    #   - resultados:/app/databases_mock
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M


  tratador1_limpeza:
    build:
      context: ./tratadores
    command: cleaner.py
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M  


  tratador2_filtragem:
    build:
      context: ./tratadores
    command: filtrador.py
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M  


  # tratador3_merge:
  #   build:
  #     context: ./tratadores
  #   command: tratador_merge.py
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   # deploy:
  #   #   resources:
  #   #     limits:
  #   #       cpus: '0.5'
  #   #       memory: 512M
  #   #     reservations:
  #   #       cpus: '0.25'
  #   #       memory: 256M  

      
  tratador5_media:
    build:
      context: ./tratadores
    command: tratador_media.py
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '0.5'
    #       memory: 512M
    #     reservations:
    #       cpus: '0.25'
    #       memory: 256M  
    

  api:
    build:
      context: ./api
    ports:
      - "8000:8000"
    # depends_on:
    #   - tratador-merge
    #   - tratador-media
    command: ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]

  dashboard:
    build:
      context: ./dashboard
    ports:
      - "8501:8501"
    depends_on:
      - api
    command: ["streamlit", "run", "dashboard.py", "--server.port=8501", "--server.address=0.0.0.0"]

volumes:
  zookeeper_data:
  kafka_data:
